#!/bin/bash

# (c) Josemi Li√©bana <office@josemi-liebana.com> <http://josemi-liebana.com>
#
# For the full copyright and license information, please view the License
# file that was distributed with this source code.
#

# Configuration variables
# -----------------------

# getUrlWith string The callback function that handles how to retrieve the URL.
# Actually just curl and wget are implemented.
# 
# You can easily extended just by adding a custom function called 
# getUrlWith_Yourtoolname. The function has to return the redirect URL
# of yubnub for your giving command
getUrlWith="curl"

# openWith string The callback function that handles what to do with
# the returned URL 
openWith="remoteOpen"

# checkUrl bool Whenever to checks if the getUrlWith is in the system
checkUrl=true

# checkWith bool Whenever to checks if the openWith is in the system
checkOpen=false

# Yubnub parse URL (normally you don't have to touch this setting)
yubnub_url="http://yubnub.org/parser/parse" 

# Variables configured on runtime
# -------------------------------
# The name of the script
name=$0
# The parameters passed
params="$@"
# The returned URL from yubnub
url=""

usage()
{
    echo ""
    echo "Usage: \$${name} command [command]"
    echo ""
    echo "Examples:"
    echo "  ls                          | List all available commands."
    echo "  ls google                   | List all command that contains \"google\" in the name or in the description."
    echo "  random 100                  | Pick a random number between 1 and 100."
    echo "  gim porsche 911             | Do a Google Image search for Porsche 911's."
    echo "  man random                  | Display help for the \"random\" command." 
    echo ""
    echo "Popular Searches:"
    echo "  Google                      | g"
    echo "  Google News                 | gnews"
    echo "  Yahoo!                      | y"
    echo "  Wikipedia                   | wp"
    echo "  Technorati                  | tec"
    echo "  Amazon                      | am"
    echo "  CNN                         | cnn"
    echo "  Weather for zip code        | weather"
    echo "  Ebay                        | eBay"
    echo "  AllMusic.com                | allmusic"
    echo "  del.icio.us tag             | deli"
    echo "  Flickr                      | flk"
    echo "  ESPN                        | espn"
    echo "  Yahoo! Stock Quote          | stock"
    echo "  Dictionary (Answers.com )   | a"

    exit 1
}

helper_error()
{
    if [ "$1" = "getUrlWith" ]; then
        local value=${getUrlWith}
    elif [ "$1" = "openWith" ]; then
        local value=${openWith}
    fi

    echo $value
}

error_with()
{
    
    local msg=""
    local value=$(helper_error "$1")   

    if [ "${value}" = "" ]; then
        msg="You must set the variable $1 in the script configuration."
    else
        msg="You have set the $1 to ${value} but it wasn't found on your system."
    fi

    echo ""
    echo "Error: ${msg}"
    echo ""

    exit 1
}

error_withFunction()
{
    local value=$(helper_error "$1")
    
    echo ""
    echo "The variable $1 is set to ${value} but there isn't a function implemented to handle it."
    echo "" 
    echo "You must write a function called getUrlWith_${value} that handles the URL requests."
    echo ""
                              
    exit 1
}

# Checks that at least one param is passed, if not so the usage
check_params() 
{    
    if [ "${params}" = "" ]; then
        echo ""
        echo "No command specified"
        usage
    fi
} 

# Call the appropiate getURL function
getUrl()
{
    if [ "${getUrlWith}" = "" ]; then
        error_with "getUrlWith"
    fi

    if [ "${checkUrl}" = true ]; then
        if [ "$(which ${getUrlWith})" = "" ]; then
            error_with "getUrlWith"
        fi
    fi
     
    if [ "$(type getUrlWith_${getUrlWith} 2>&1 | grep 'is a function')" ] ; then
        getUrlWith_${getUrlWith}
    else
        error_withFunction "getUrlWith"
    fi
}

# Handle the URL requests with CURL
getUrlWith_curl()
{
    url=$(curl -d "command=${params}" ${yubnub_url}  2>/dev/null | grep -o -E 'href="([^"#]+)"' | cut -d'"' -f2)
}

# Handle the URL requests with WGET
getUrlWith_wget()
{
    url="$(wget -qO- --max-redirect=0 --server-response --post-data=\"command=${params}\" ${yubnub_url} 2>&1 | grep 'location:' | cut -d ' ' -f4)"
}

# Opens the received URL with the preferred method 
openUrl()
{
    if [ "${openWith}" = "" ]; then
        error_with "openWith"
    fi

    if [ "${checkOpen}" = true ]; then
        if [ "$(which ${openWith})" = "" ]; then
            error_with "openWith"
        fi
    fi
    
    if [ "$(type openWith_${openWith} 2>&1 | grep 'is a function')" ] ; then
        openWith_${openWith}
    else
        error_withFunction "openWith"
    fi 
}

# Just outputs the URL
openWith_console()
{
    echo "${url}"
}

# Open the URL with the default program to handle URLs (Mac OsX)
openWith_open()
{
    open "${url}"
}

# Open the URL with the w3m console browser
openWith_w3m()
{
    w3m "${url}"
}

openWith_remoteOpen()
{
    ssh macbook `echo open "${url}"`
}

openWith_surf()
{
    surf "${url}"
}

check_params
getUrl
openUrl
exit 0
